Dear OpenDDR user, 

Directory Tree
==============

The directory setup is the typical setup for a Maven style project, with a few exceptions in order to keep you from having to use maven.  The directories are as follows:

    src/main/java:  Java source files
    src/main/resources:  the oddr.properties template file *and* jars needed for compile and running
    src/test/java:  Unit tests go here

Building
========

You can use maven to build the project by using the following:

  $ mvn compile

To build the project for use in another application, use:

  $ mvn package

Doing package will create a jar from the source code, and also copy all the other jars and property files you will need into the _dist_ directory.

Finally

  $ mvn clean

will remove any temporary directories.

*Note* if you are into maven, you will notice that within the pom.xml the jar files are gotten from the local file system (the resources directory).  This is not as it should be, but I am currently forking this project, and don't want to assume moving everything to maven is ok.

If you desire to use maven in the "right way", then you will need to edit the dependency section of the _pom.xml_ file.


oddr.properties
===============

The following is a basic explanation of the properties in oddr.properties.

oddr.ua.device.builder.path
---------------------------
Path of the file that explain how to identify the devices. In this, for each builder, are specified the devices id that the builder handle and the identification rules.

oddr.ua.device.datasource.path
------------------------------
Path of the device datasource

oddr.ua.device.builder.patch.paths
----------------------------------
Path of the patch file for the builder file.

oddr.ua.device.datasource.patch.paths
-------------------------------------
Path of the patch file for the device data source

oddr.ua.browser.datasource.path
-------------------------------
Path of the browser data source

oddr.ua.operatingSystem.datasource.path
----------------------------------------
Path of the operating system data source

oddr.vocabulary.core.path
-------------------------
Path of the W3C vocabulary file

oddr.vocabulary.path
---------------------
Path of OpenDDR vocabulary

oddr.limited.vocabulary.path
-----------------------------
Path of the reduced vocabulary. This vocabulary is useful to limit the memory load. It can be safely left unspecified.

oddr.vocabulary.device
----------------------
IRI of the default vocabulary. It is the target namespace specified in a vocabulary

oddr.threshold
--------------
Identification threshold. It is used to balance the request evaluation time and identification matching.


Servlet Filter Example
======================

This is a java example on how to integrate OpenDDR in a servlet Filter:

	package org.openddr.samplewebapp.filter;

	import java.io.IOException;
	import java.util.Properties;
	import javax.servlet.Filter;
	import javax.servlet.FilterChain;
	import javax.servlet.FilterConfig;
	import javax.servlet.ServletContext;
	import javax.servlet.ServletException;
	import javax.servlet.ServletRequest;
	import javax.servlet.ServletResponse;
	import javax.servlet.http.HttpServletRequest;
	import org.openddr.simpleapi.oddr.ODDRService;
	import org.openddr.simpleapi.oddr.model.ODDRHTTPEvidence;
	import org.w3c.ddr.simple.Evidence;
	import org.w3c.ddr.simple.PropertyRef;
	import org.w3c.ddr.simple.PropertyValue;
	import org.w3c.ddr.simple.PropertyValues;
	import org.w3c.ddr.simple.Service;
	import org.w3c.ddr.simple.ServiceFactory;
	import org.w3c.ddr.simple.exception.NameException;

	public class IdentificationFilter implements Filter {

	    private Service identificationService = null;

	    public void init(FilterConfig filterConfig) throws ServletException {
            System.out.println("Initialize filter");
            Properties initializationProperties = new Properties();
            ServletContext context = filterConfig.getServletContext();

            try {
                initializationProperties.load(context.getResourceAsStream("/WEB-INF/oddr.properties"));
                identificationService = ServiceFactory.newService("org.openddr.simpleapi.oddr.ODDRService", initializationProperties.getProperty(ODDRService.ODDR_VOCABULARY_IRI), initializationProperties);

            } catch (Exception ex) {
                throw new RuntimeException(ex);
            }
	    }

	    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
            PropertyRef vendorRef;
            PropertyRef modelRef;
            PropertyRef displayWidthRef;
            PropertyRef displayHeightRef;

            try {
                vendorRef = identificationService.newPropertyRef("vendor");
                modelRef = identificationService.newPropertyRef("model");
                displayWidthRef = identificationService.newPropertyRef("displayWidth");
                displayHeightRef = identificationService.newPropertyRef("displayHeight");

            } catch (NameException ex) {
                throw new RuntimeException(ex);
            }

            PropertyRef[] propertyRefs = new PropertyRef[] {vendorRef, modelRef, displayWidthRef, displayHeightRef};
            Evidence e = new ODDRHTTPEvidence();
            e.put("User-Agent", ((HttpServletRequest)request).getHeader("User-Agent"));

            try {
                PropertyValues propertyValues = identificationService.getPropertyValues(e, propertyRefs);
                PropertyValue vendor = propertyValues.getValue(vendorRef);
                PropertyValue model = propertyValues.getValue(modelRef);
                PropertyValue displayWidth = propertyValues.getValue(displayWidthRef);
                PropertyValue displayHeight = propertyValues.getValue(displayHeightRef);

                if (vendor.exists() && model.exists() && displayWidth.exists() && displayHeight.exists()) {
                    ((HttpServletRequest)request).setAttribute("vendor", vendor.getString());
                    ((HttpServletRequest)request).setAttribute("model", model.getString());
                    ((HttpServletRequest)request).setAttribute("displayWidth", displayWidth.getInteger());
                    ((HttpServletRequest)request).setAttribute("displayHeight", displayHeight.getInteger());

                }

            } catch (Exception ex) {
                throw new RuntimeException(ex);
            }

            chain.doFilter(request, response);
	    }

	    public void destroy() {
		    System.out.println("Destroy Filter");
	    }
	}
